#!/usr/bin/env /usr/bin/python3.12

# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

import os
import argparse
import requests


from time import strftime, gmtime
VERBOSE = False


def UNICODE(text):
    return text


def YN(val):
    if val:
        return 'Y'
    return 'N'


def Commas(value):
    sval = str(value)
    result = ""
    while True:
        if len(sval) == 0:
            return result
        left = sval[:-3]
        right = sval[-3:]
        result = right + result
        if len(left) > 0:
            result = ',' + result
        sval = left


def TimeLong(value):
    day = value // (24 * 3600)
    time = value % (24 * 3600)
    hour = time // 3600
    time %= 3600
    minutes = time // 60
    time %= 60
    seconds = time
    return "%03d:%02d:%02d:%02d" % (day, hour, minutes, seconds)


def TimeShort(value):
    return strftime("%X", gmtime(value / 1000000000))


def NumKMG(value, base=1000):
    """
    Format large numbers in a human readable summary
    """
    # IEEE 1541 numeric suffix definitions:
    SUFFIX = {1024: ('KiB', 'MiB', 'GiB', 'TiB', 'PiB'),
              1000: ('k', 'm', 'g', 't', 'p')}

    def _numCell(fp, suffix):
        # adjust the precision based on the size
        if fp < 10.0:
            return "%.2f %s" % (fp, suffix)
        if fp < 100.0:
            return "%.1f %s" % (fp, suffix)
        return "%.0f %s" % (fp, suffix)

    if value < base:
        return "%d" % value

    # round down to a power of base:
    sx = SUFFIX[base]
    for i in range(len(sx)):
        value /= float(base)
        if value < base:
            return _numCell(value, sx[i])
    return _numCell(value, sx[-1])


class Header:
    """ """
    NONE = 1
    KMG = 2    # 1000 based units
    YN = 3
    Y = 4
    TIME_LONG = 5
    TIME_SHORT = 6
    DURATION = 7
    COMMAS = 8
    # This is a plain number, no formatting
    PLAIN_NUM = 9
    KiMiGi = 10  # 1024 based units

    def __init__(self, text, format=NONE):
        self.text = text
        self.format = format

    def __repr__(self):
        return self.text

    def __str__(self):
        return self.text

    def formatted(self, value):
        try:
            if value is None:
                return ''
            if self.format == Header.NONE:
                return value
            if self.format == Header.PLAIN_NUM:
                return PlainNum(value)
            if self.format == Header.KMG:
                return NumKMG(value)
            if self.format == Header.KiMiGi:
                return NumKMG(value, base=1024)
            if self.format == Header.YN:
                if value:
                    return 'Y'
                return 'N'
            if self.format == Header.Y:
                if value:
                    return 'Y'
                return ''
            if self.format == Header.TIME_LONG:
                return TimeLong(value)
            if self.format == Header.TIME_SHORT:
                return TimeShort(value)
            if self.format == Header.DURATION:
                value = max(value, 0)
                sec = value / 1000000000
                min = sec / 60
                hour = min / 60
                day = hour / 24
                result = ""
                if day > 0:
                    result = "%dd " % day
                if hour > 0 or result != "":
                    result += "%dh " % (hour % 24)
                if min > 0 or result != "":
                    result += "%dm " % (min % 60)
                result += "%ds" % (sec % 60)
                return result
            if self.format == Header.COMMAS:
                return Commas(value)
        except:
            return "?"


def PlainNum(value):
    try:
        ret_val = "%d" % value
        return ret_val
    except:
        return "%s" % value


class BodyFormat:
    """
    Display body format chooses between:
     CLASSIC - original variable-width, unquoted, text delimited by white space
     CSV     - quoted text delimited by commas
    """
    CLASSIC = 1
    CSV = 2


class CSV_CONFIG:
    """ """
    SEPERATOR = ','
    STRING_QUOTE = '"'


class Display:
    """ Display formatting """

    def __init__(self, spacing=2, prefix="  ", bodyFormat=BodyFormat.CLASSIC):
        self.tableSpacing    = spacing
        self.tablePrefix     = prefix
        self.timestampFormat = "%X"
        if bodyFormat == BodyFormat.CLASSIC:
            self.printTable = self.table
        elif bodyFormat == BodyFormat.CSV:
            self.printTable = self.tableCsv
        else:
            raise Exception("Table body format must be CLASSIC or CSV.")

    def formattedTable(self, title, heads, rows):
        fRows = []
        for row in rows:
            fRow = []
            col = 0
            for cell in row:
                fRow.append(heads[col].formatted(cell))
                col += 1
            fRows.append(fRow)
        headtext = []
        for head in heads:
            headtext.append(head.text)
        self.printTable(title, headtext, fRows)

    def table(self, title, heads, rows):
        """ Print a table with autosized columns """

        # Pad the rows to the number of heads
        for row in rows:
            diff = len(heads) - len(row)
            for idx in range(diff):
                row.append("")

        print("%s" % title)
        if len(rows) == 0:
            return
        colWidth = []
        col      = 0
        line     = self.tablePrefix
        for head in heads:
            width = len(head)
            for row in rows:
                text = UNICODE(row[col])
                cellWidth = len(text)
                if cellWidth > width:
                    width = cellWidth
            colWidth.append(width + self.tableSpacing)
            line = line + head
            if col < len(heads) - 1:
                for i in range(colWidth[col] - len(head)):
                    line = line + " "
            col = col + 1
        print(line)
        line = self.tablePrefix
        for width in colWidth:
            for i in range(width):
                line = line + "="
        print(line)

        for row in rows:
            line = self.tablePrefix
            col  = 0
            for width in colWidth:
                text = UNICODE(row[col])
                line = line + text
                if col < len(heads) - 1:
                    for i in range(width - len(text)):
                        line = line + " "
                col = col + 1
            print(line)

    def tableCsv(self, title, heads, rows):
        """
        Print a table with CSV format.
        """

        def csvEscape(text):
            """
            Given a unicode text field, return the quoted CSV format for it
            :param text: a header field or a table row field
            :return:
            """
            if len(text) == 0:
                return ""
            else:
                text = text.replace(CSV_CONFIG.STRING_QUOTE, CSV_CONFIG.STRING_QUOTE * 2)
                return CSV_CONFIG.STRING_QUOTE + text + CSV_CONFIG.STRING_QUOTE

        print("%s" % title)
        if len(rows) == 0:
            return

        print(','.join([csvEscape(UNICODE(head)) for head in heads]))
        for row in rows:
            print(','.join([csvEscape(UNICODE(item)) for item in row]))

    def do_setTimeFormat(self, fmt):
        """ Select timestamp format """
        if fmt == "long":
            self.timestampFormat = "%c"
        elif fmt == "short":
            self.timestampFormat = "%X"

    def timestamp(self, nsec):
        """ Format a nanosecond-since-the-epoch timestamp for printing """
        return strftime(self.timestampFormat, gmtime(nsec / 1000000000))

    def duration(self, nsec):
        nsec = max(nsec, 0)
        sec = nsec / 1000000000
        min = sec / 60
        hour = min / 60
        day = hour / 24
        result = ""
        if day > 0:
            result = "%dd " % day
        if hour > 0 or result != "":
            result += "%dh " % (hour % 24)
        if min > 0 or result != "":
            result += "%dm " % (min % 60)
        result += "%ds" % (sec % 60)
        return result


class Sortable:
    """ """

    def __init__(self, row, sortIndex):
        self.row = row
        self.sortIndex = sortIndex
        if sortIndex >= len(row):
            raise Exception("sort index exceeds row boundary")

    def __lt__(self, other):
        return self.row[self.sortIndex] < other.row[self.sortIndex]

    def getRow(self):
        return self.row


class Sorter:
    """ """

    def __init__(self, heads, rows, sortCol, limit=0, inc=True):
        col = 0
        for head in heads:
            if head.text == sortCol:
                break
            col += 1
        if col == len(heads):
            raise Exception("sortCol '%s', not found in headers" % sortCol)

        list = []
        for row in rows:
            list.append(Sortable(row, col))
        list.sort()
        if not inc:
            list.reverse()
        count = 0
        self.sorted = []
        for row in list:
            self.sorted.append(row.getRow())
            count += 1
            if count == limit:
                break

    def getSorted(self):
        return self.sorted
    
##========================================================================================
##
##========================================================================================

URL     = os.getenv('SKXURL', 'localhost:8085')
SCHEME  = 'http'

def apiquery(method, path, json=None, text=None):
    if VERBOSE:
        print('%s %s %r' % (method, SCHEME + '://' + URL + path, json))
    result = requests.request(method, SCHEME + '://' + URL + path, json=json)
    if (result.status_code > 299):
        print("Error: (%d) %s" % (result.status_code, result.text))
        exit(1)
    return result


def postfile(path, filename):
    if VERBOSE:
        print('POST %s' % SCHEME + '://' + URL + path)
    with open(filename, "r") as infile:
        filetext = infile.read()
        print(filename)
        print(filetext)
    result = requests.request('POST', SCHEME + '://' + URL + path, data=filetext, headers={'Content-Type':'application/json'})
    if (result.status_code > 299):
        print("Error: (%d) %s" % (result.status_code, result.text))
        exit(1)
    return result


DISPATCH = {   # {object : {verb : ([positional], [options], METHOD, URI, data-format, title, [columns])}
    ##
    ## Backbone
    ##
    'backbone' : {
        'create' : (['name'], ['multitenant'], 'POST',   '/api/v1alpha2/backbones', 'CreateResult'),
        'delete' : (['backboneid'], [],        'DELETE', '/api/v1alpha2/backbone/${backboneid}', 'Result'),
        'list'   : ([], [],                    'GET',    '/api/v1alpha2/backbones', 'Table', 'Backbone Networks',
                    ['id', 'name', ('stat', None, 'lifecycle'), 'failure', ('multitenant', 'YN')]),
        'activate' : (['id'], [],              'PUT',    '/api/v1alpha2/backbone/${id}/activate', 'Result'),
    },

    ##
    ## Backbone-Site
    ##
    'site' : {
        'create' : (['name'], ['backbone'], 'POST',   '/api/v1alpha2/backbone/${backbone}/sites', 'CreateResult'),
        'delete' : (['siteid'], [],         'DELETE', '/api/v1alpha2/backbonesite/${siteid}', 'Result'),
        'list'   : ([],       ['backbone'], 'GET',    '/api/v1alpha2/backbone/${backbone}/sites', 'Table', 'Backbone Sites',
                    ['id', 'name', ('stat', None, 'lifecycle'), 'failure', ('deploy', None, 'deploymentstate'), ('since', None, 'firstactivetime'), ('last', None, 'lastheartbeat')]),
        'deploy' : (['siteid', 'outfile'], ['format'], 'GET', '/api/v1alpha1/backbonesite/${siteid}/${format}', 'File'),
        'boot-ingress' : (['siteid', 'infile'], [], 'POST', '/api/v1alpha1/backbonesite/${siteid}/ingress', 'SendFile'),
        'boot-finish'  : (['siteid', 'outfile'], ['format'],   'GET',  '/api/v1alpha1/backbonesite/${siteid}/accesspoints/${format}', 'File'),
    },

    ##
    ## Access Point
    ##
    'access-point' : {
        'create' : (['siteid', 'kind'], ['bindhost'], 'POST',   '/api/v1alpha2/backbonesite/${siteid}/accesspoints', 'CreateResult'),
        'delete' : (['apid'],           [],           'DELETE', '/api/v1alpha2/accesspoint/${apid}', 'Result'),
        'list'   : (['siteid'],         [],           'GET',    '/api/v1alpha2/backbonesite/${siteid}/accesspoints', 'Table', 'Backbone Access Points',
                    ['id', 'name', ('stat', None, 'lifecycle'), 'failure', 'kind', 'bindhost']),
    },

    ##
    ## Link
    ##
    'link' : {
        'create' : (['accesspoint', 'connectingsite'], ['cost'], 'POST', '/api/v1alpha2/accesspoint/${accesspoint}/links', 'CreateResult'),
        'delete' : (['linkid'], [], 'DELETE', '/api/v1alpha2/backbonelink/${linkid}', 'Result'),
        'list'   : ([], ['backbone'], 'GET', '/api/v1alpha2/backbone/${backbone}/links', 'Table', 'Backbone Links',
                    ['id', ('access-point', 'APNAME', 'accesspoint'), ('lSite', 'APSITENAME', 'accesspoint'), ('cSite', 'SITENAME', 'connectinginteriorsite'), ('cost', 'NUM', 'cost')]),
    },

    ##
    ## VAN
    ##
    'van' : {
        'create' : (['name'], ['backbone'], 'POST',   '/api/v1alpha1/backbone/${backbone}/vans', 'CreateResult'),
        'delete' : (['vanid'], [],          'DELETE', '/api/v1alpha1/van/${vanid}', 'Result'),
        'list'   : ([], [],                 'GET',    '/api/v1alpha1/vans', 'Table', 'Application Networks',
                        ['id', ('backbone', None, 'backbonename'), 'name', ('stat', None, 'lifecycle'), 'failure', ('start', None, 'starttime'), ('end', None, 'endtime')]),
        'evict'  : (['vanid'], [],          'PUT',    '/api/v1alpha1/van/${vanid}/evict', 'Result')
    },

    ##
    ## Invitation
    ##
    'invite' : {
        'create' : (['vanid', 'name', 'claimaccess', 'primaryaccess'], ['interactive', 'prefix', 'siteclass'], 'POST', '/api/v1alpha1/van/${vanid}/invitations', 'CreateResult'),
        'delete' : (['inviteid'], [], 'DELETE', '/api/v1alpha1/invitation/${inviteid}', 'Result'),
        'list'   : (['vanid'], [],    'GET',    '/api/v1alpha1/van/${vanid}/invitations', 'Table', 'Application Network Invitations',
                        ['id', 'name', ('stat', None, 'lifecycle'), 'failure', ('limit', 'NUM', 'instancelimit'), ('count', 'NUM', 'instancecount'), ('fetch', 'NUM', 'fetchcount'), ('interactive', 'YN', 'interactive'), ('deadline', None, 'joindeadline')]),
        'deploy' : (['inviteid', 'outfile'], ['format'], 'GET', '/api/v1alpha1/invitation/${inviteid}/${format}', 'File'),
        'expire' : (['inviteid'], [], 'PUT',    '/api/v1alpha1/invitation/${inviteid}/expire', 'Result')
    },

    ##
    ## Member
    ##
    'member' : {
        'list'  : (['vanid'], [], 'GET', '/api/v1alpha1/van/${vanid}/members', 'Table', 'Application Network Members',
                    ['id', 'name', ('stat', None, 'lifecycle'), 'failure', ('joined', None, 'firstactivetime'), ('last', None, 'lastheartbeat'), ('invite', 'INVITENAME', 'invitation')]),
        'evict' : (['memberid'], [], 'PUT', '/api/v1alpha1/member/${memberid}/evict', 'Result'),
    },

    ##
    ## Member-Class
    ##
}


def substitute(uri, data):
    remove_keys = []
    for (key, value) in data.items():
        tag = "${%s}" % key
        if uri.rfind(tag) != -1:
            uri = uri.replace(tag, value)
            remove_keys.append(key)
    for key in remove_keys:
        data.pop(key)
    if len(data) == 0:
        data = None
    return uri, data


def normalize_desc_table(desc):
    norm_table = []
    for e in desc:
        norm = None
        if e.__class__ == str:
            norm = (e, None, e)
        elif len(e) == 1:
            norm = (e[0], None, e[0])
        elif len(e) == 2:
            norm = (e[0], e[1], e[0])
        else:
            norm = e
        norm_table.append(norm)
    return norm_table


def process(desc, data):
    if len(desc) > 4 and desc[4] == 'SendFile':
        filename = data.get('infile', None)
        if filename == None:
            print('Missing argument: infile')
            exit(1)
        uri, data = substitute(desc[3], data)
        result = postfile(uri, filename)
    else:
        method = desc[2]
        uri, data = substitute(desc[3], data)
        result = apiquery(method, uri, data)

    if len(desc) > 4:
        style = desc[4]

        if style == 'Text':
            print(result.text)
        elif style == 'Result':
            print('Result code: %d' % result.status_code)
        elif style == 'CreateResult':
            print(result.json()['id'])
        elif style == 'File':
            with open(data['outfile'], "w") as outfile:
                outfile.write(result.text)
        elif style == 'Table':
            objlist = result.json()
            title = desc[5]
            table = normalize_desc_table(desc[6])
            disp = Display()
            heads = []
            rows  = []
            for e in table:
                heads.append(Header(e[0]))
            for obj in objlist:
                row = []
                for e in table:
                    typetag = e[1]
                    attrname = e[2]
                    val = None
                    if typetag == None:
                        val = obj[attrname] or '-'
                    elif typetag == 'YN':
                        val = YN(obj[attrname])
                    elif typetag == 'TL':
                        val = TimeLong(obj[attrname])
                    elif typetag == 'TS':
                        val = TimeShort(obj[attrname])
                    elif typetag == 'NUM':
                        val = str(obj[attrname])
                        if val == 'None':
                            val = '-'
                    elif typetag == 'SITENAME':
                        val = apiquery('GET', '/api/v1alpha2/backbonesite/%s' % obj[attrname]).json()['name']
                    elif typetag == 'APNAME':
                        val = apiquery('GET', '/api/v1alpha2/accesspoint/%s' % obj[attrname]).json()['name']
                    elif typetag == 'APSITENAME':
                        siteId = apiquery('GET', '/api/v1alpha2/accesspoint/%s' % obj[attrname]).json()['interiorsite']
                        val    = apiquery('GET', '/api/v1alpha2/backbonesite/%s' % siteId).json()['name']
                    elif typetag == 'INVITENAME':
                        val = apiquery('GET', '/api/v1alpha1/invitation/%s' % obj[attrname]).json()['name']
                    row.append(val)
                rows.append(row)
            disp.formattedTable(title, heads, rows)
            if len(rows) == 0:
                print("  ==== None Found ====")


def main():
    parser = argparse.ArgumentParser(prog = "skx", description = "Skupper-X Command Line Utility")
    parser.add_argument('pos', type=str, nargs='*')
    parser.add_argument('-v', '--verbose', action='store_true', required=False)
    parser.add_argument('--no-multitenant', dest='multitenant', action='store_false', required=False)
    parser.add_argument('--backbone', action='store', required=False)
    parser.add_argument('--bindhost', action='store', required=False)
    parser.add_argument('--cost',     action='store', required=False, default='1')
    parser.add_argument('--format',   action='store', required=False, default='kube')
    parser.add_argument('--interactive', action='store_true', required=False)
    parser.add_argument('--prefix', action='store', required=False)
    parser.add_argument('--siteclass', action='store', required=False)
    args   = parser.parse_args()
    if len(args.pos) < 2:
        print("Please specify at least an object and a verb")
        exit(1)
    object = args.pos[0]
    verb   = args.pos[1]
    global VERBOSE
    VERBOSE = args.verbose

    object_line = DISPATCH.get(object, None)
    if object_line == None:
        print("Object '%s' unknown.  Try:" % object)
        for o in DISPATCH.keys():
            print("    %s" % o)
        exit(1)

    desc = object_line.get(verb, None)
    if desc == None:
        print("Verb '%s' is not applicable to object '%s'.  Try:" % (verb, object))
        for v in object_line.keys():
            print("    %s" % v)
        exit(1)

    data = {}
    pos = 2
    for arg_name in desc[0]:
        if len(args.pos) < pos + 1:
            print("Missing argument for %s" % arg_name)
            exit(1)
        data[arg_name] = args.pos[pos]
        pos += 1

    for option_name in desc[1]:
        val = args.__getattribute__(option_name)
        if val.__class__ == bool:
            val = 'true' if val else 'false'
        if val != None:
            data[option_name] = val

    process(desc, data)


if __name__ == "__main__":
    main()
